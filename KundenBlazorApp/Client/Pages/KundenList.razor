@page "/kunden"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using System.Timers
@using Microsoft.Extensions.Logging
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navManager
@implements IDisposable
@inject ILogger<KundenList> Logger

<div class="d-flex justify-content-center">
<div class="listcontainer">
@if (starnyList is not null)
        {
            var k = 0;
            <div class="stranarow">
                <div>№</div>
                <div>Фамилия Имя</div>
                <div>Телефон</div>
                <div>Регион</div>
                <div class=""></div>
            </div>
            foreach (var strana in starnyList)
            {
                k++;
                <div class="stranarow">
                    <div>@k</div>
                    <div>@strana.Name1 @(
                string.IsNullOrEmpty(strana.Name2) ? "" : strana.Name2
                )</div>
                    <div>@strana.Numer</div>
                    <div>@strana.Region</div>
                    <div>
                        <button class="btn btn-outline-info" @onclick="@(() => EditTurnir(strana.Id))">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                            </svg>
                        </button>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="spinner-border text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        <button class="btn btn-outline-info " @onclick="Randomize">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots" viewBox="0 0 16 16">
                <path d="M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z" />
            </svg>
            <span class="mx-2">Randomize...@message</span>
        </button>
    </div>
</div>

<div class="@Style1">
    <div class="animation01">
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
    </div>
    <div class="animation02">
        <div></div>
        <div></div>
    </div>
    <div class="animation03">
        <div class="circle">
            <div class="circle_element01"></div>
        </div>
        <div class="circle">
            <div class="circle_element02"></div>
        </div>
        <div class="circle">
            <div class="circle_element03"></div>
        </div>
        <div class="animation04">
            <div class="line_wrapper line_wrapper01">
                <span class="line line01"></span>
            </div>
            <div class="rotate45">
                <div class="line_wrapper line_wrapper02">
                    <span class="line line02"></span>
                </div>
            </div>
            <div class="line_wrapper line_wrapper03">
                <span class="line line03"></span>
            </div>
            <div class="rotate135">
                <div class="line_wrapper line_wrapper04">
                    <span class="line line04"></span>
                </div>
            </div>
            <div class="line_wrapper line_wrapper05">
                <span class="line line05"></span>
            </div>
            <div class="rotate-135">
                <div class="line_wrapper line_wrapper06">
                    <span class="line line06"></span>
                </div>
            </div>
            <div class="line_wrapper line_wrapper07">
                <span class="line line07"></span>
            </div>
            <div class="rotate-45">
                <div class="line_wrapper line_wrapper08">
                    <span class="line line08"></span>
                </div>
            </div>
        </div>
        <div class="animation05">
            <div class="double_wrapper02 green02">
                <div class="double_wrapper01 green01">
                    <div class="double_block green00"></div>
                </div>
            </div>
            <div class="double_wrapper02 navy02">
                <div class="double_wrapper01 navy01">
                    <div class="double_block navy00"></div>
                </div>
            </div>
            <div class="double_wrapper02 yellow02">
                <div class="double_wrapper01 yellow01">
                    <div class="double_block yellow00"></div>
                </div>
            </div>
            <div class="double_wrapper02 blue02">
                <div class="double_wrapper01 blue01">
                    <div class="double_block blue00"></div>
                </div>
            </div>
            <div class="double_wrapper02 red02">
                <div class="double_wrapper01 red01">
                    <div class="double_block red00"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="animation06">
        <div class="rhombus05">
            <div class="rhombus04">
                <div class="rhombus03">
                    <div class="rhombus02">
                        <div class="rhombus01"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="animation07">
        <div class="circle">
            <div class="circle_element01"></div>
        </div>
        <div class="line_wrapper line_wrapper01">
            <span class="line line01"></span>
        </div>
        <div class="rotate60">
            <div class="line_wrapper line_wrapper02">
                <span class="line line02"></span>
            </div>
        </div>
        <div class="rotate120">
            <div class="line_wrapper line_wrapper03">
                <span class="line line03"></span>
            </div>
        </div>
        <div class="line_wrapper line_wrapper04">
            <span class="line line04"></span>
        </div>
        <div class="rotate-120">
            <div class="line_wrapper line_wrapper05">
                <span class="line line05"></span>
            </div>
        </div>
        <div class="rotate-60">
            <div class="line_wrapper line_wrapper06">
                <span class="line line06"></span>
            </div>
        </div>
    </div>
    <div class="animation08">
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
    </div>
    <div class="animation088">
        <div class="name_plate">
            <div class="name">Панкрашкин Дмитрий<div>+7 913 4828191</div></div>
        </div>
    </div>
</div>

@code {
    List<Kunde>? starnyList { get; set; }
    protected bool IsDisabled { get; set; } = false;

    bool isLoading = false;
    int idToDelete = 0;
    int total = 0;
    string message = "";

    private Timer _timer;
    private TimeSpan testTime;
    int interval = 1;

    public void SetTimer()
    {
        testTime = TimeSpan.FromMinutes(1);
        total = 0;
        _timer = new Timer(1000.0);
        _timer.Elapsed += NotifyTimerElapsed;
        _timer.Enabled = true;
        _timer.Start();
    }

    private void NotifyTimerElapsed(Object source, ElapsedEventArgs e)
    {
        total += 1;
        message = $"{total}";
        if (total > 8)
        {
            Style1 = "d-none";
            KillTimer();
        }else
        if (total > 7)
        {
            Style1 = "d-none1";
        }
        StateHasChanged();
    }

    void KillTimer()
    {
        _timer.Enabled = false;
        _timer.Stop();
        _timer.Elapsed -= NotifyTimerElapsed;
        _timer.Dispose();
    }

    int Pages
    {
        get { return (int)(total / ItemsPerPage + 1); }
    }

    int itemsPerPage = 150;
    int ItemsPerPage
    {
        get { return itemsPerPage; }
        set
        {
            if (itemsPerPage != value)
            {
                itemsPerPage = value;
                CurrentPage = 1;
                UpdateList();
            }
        }
    }

    int currentPage = 1;
    int CurrentPage
    {
        get { return currentPage; }
        set
        {
            currentPage = value;
            UpdateList();
        }
    }

    async Task OnPage(int k)
    {
        CurrentPage = k;
        await UpdateList();
    }

    async Task Next()
    {
        if (CurrentPage < Pages)
        {
            CurrentPage += 1;
            await UpdateList();
        }
    }

    async Task Previous()
    {
        if (CurrentPage > 1)
        {
            CurrentPage -= 1;
            await UpdateList();
        }
    }

    string inputName = string.Empty;
    string InputName
    {
        get { return inputName; }
        set
        {
            inputName = value;
            UpdateList();
        }
    }
    StranaSortStats stranaSortStats = StranaSortStats.NameAsc;
    string mess = "";

    protected override async Task OnInitializedAsync()
    {
        //SetTimer();
        try
        {
            await UpdateList();
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex.Message, ex);
        }
        //dialogService.OnHide += OnHide;
    }

    protected async Task Delete(int id)
    {
        idToDelete = id;
        //dialogService.ShowToast("beim Schlucken tut mir der Hals weh", ToastLevel.Error);
    }

    async Task UpdateList()
    {
        KundenListDTO dto = new()
            {
                CurrentPage = CurrentPage,
                ItemsPerPage = ItemsPerPage,
                SortState = stranaSortStats,
                SelectedName = inputName
            };
        using var response = await Http.PostAsJsonAsync($"api/kunde/kunden", dto);
        KundenListBackDTO? backDTO = await response.Content.ReadFromJsonAsync<KundenListBackDTO>();

        starnyList = backDTO?.Kunden;
        //total = backDTO is null ? 0 : backDTO.Total;
        StateHasChanged();
    }

    protected async Task EditTurnir(int turnirId)
    {
        navManager.NavigateTo($"kunde/{turnirId}");
    }

    string Style1
    {
        get; set;
    } = "d-none";

    protected async Task Randomize()
    {
        Style1 = "";
        SetTimer();
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        //dialogService.OnHide -= OnHide;
    }


    int Func(int total)
    {
        double dt = (double)total;
        return (int)(0.002 * dt * dt - 0.01 * dt);
    }
}
